{% capture args_tpl %}{% raw %}--arg={{ opt }}['{{ arg }}']{% endraw %}{% endcapture %}
argstpl: {{ args_tpl }}

Does args_tpl contain Liquid? {{ args_tpl | holds_liquid }}

cli-args: {{ params | to_cli_args }}
cli-args: {{ params | to_cli_args: "paramequal" }}
cli-args: {{ params | to_cli_args: args_tpl, "   " }}

{% assign testfile = "test.txt" %}
{% include {{ testfile }} arg1="something here" %}

{% capture statement %}"He said, 'Away with you, Drake!'"{% endcapture %}
{{ statement | smart_format }}

{{ "Hello World!" | to_slug: "_" }}

{% comment %}
{% capture comment %}
This is a multi-line comment.
Let's see if we are able to wrap it.
{% endcapture %}

{{ comment | commentwrap }}

{{ comment | unwrap }}
{% endcomment %}

{% capture commented %}
// This is a multi-line comment.
// This is a multi-line comment that happens to be way too long for our purposes.
// Let's see if we are able to wrap it.
A third line has no comment marks but will need them added, and also is too long and will need to be truncated.
{% endcapture %}

{{ commented | wwrap: 50 }}

KEY REPLACE: {{ "name=content" | regexreplace: "([\w]+):\s([\w]+)", "\1=\2" }}

{% assign items_by_type = manifest.topics | group_by: "type" %}
{% assign items_type2 = manifest.topics| where_exp: "item","item.type == 2" %}
{% assign items_sorted_title = manifest.topics | sample: 2 %}
{% assign item_anoth = manifest.topics | where_exp: "item","item.slug == 'another-topic'" %}

item_anoth: {{ item_anoth }}

{% assign testarray = "this|that|other thing" | split: "|" %}

{{ testarray }}
{{ testarray | array_to_sentence_string }}

to_integer: {{ "5" | to_integer }}

[source,json]
----
{{ testarray | jsonify }}
----

WHOLE
{% assign manifest_whole = manifest.topics %}
{% for i in manifest_whole %}
{{ i.slug }} ({{ i.type }})
{% endfor %}

POPPED
{% assign manifest_whole = manifest_whole | pop %}
{% for i in manifest_whole %}
{{ i.slug }} ({{ i.type }})
{% endfor %}

PUSHED ("anoth")
{% assign manifest_whole = manifest_whole | push: item_anoth[0] %}
{% for i in manifest_whole %}
{{ i.slug }} ({{ i.type }})
{% endfor %}

SHIFTED
{% assign manifest_whole = manifest_whole | shift %}
{% for i in manifest_whole %}
{{ i.slug }} ({{ i.type }})
{% endfor %}

UNSHIFTED
{% assign manifest_whole = manifest_whole | unshift: item_anoth[0] %}
{% for i in manifest_whole %}
{{ i.slug }} ({{ i.type }})
{% endfor %}

{% for grp in items_by_type %}
Group {{ grp.name }}
{% for i in grp.items %}
{{ i.slug }} ({{ i.type }})
{% endfor %}
{% endfor %}

Items of Type 2:
{% for i in items_type2 %}
{{ i.slug }}
{% endfor %}

Sort by title:
{% for i in items_sorted_title %}
{{ i.title }}
{% endfor %}


{{ testfile | slugify }}

DATES:

{{ "27/01/2011" | date_to_xmlschema }}

{{ "27th Jan 2011" | date_to_rfc822 }}


{% assign test = "something `else`" %}
markdownified: {{ test | markdownify }}
slugified: {{ test | slugify }}

Else

{{ "test this thing" | slugify }}

{% assign xmlrando = 'foo "bar" <baz>' %}
{{ xmlrando | xml_escape }}

{{ " maybe this will be  something " | inspect }}
